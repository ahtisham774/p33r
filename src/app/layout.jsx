// // import { Inter } from "next/font/google";
// "use client";
// import "./globals.css";
// import "../config/axios";

// // const inter = Inter({ subsets: ["latin"] });

// // export const metadata = {
// //   title: "PEER",
// //   description: "Generated by create next app",
// // };

// import ModalProvider from "@/contexts/modals";
// import { AuthProvider, LoadingProvider } from "@/contexts";
// import Header from "@/components/header";
// import { Toaster } from "react-hot-toast";
// import Footer from "@/components/footer";

// import "react-loading-skeleton/dist/skeleton.css";
// import Script from "next/script";

// import TagManager from "react-gtm-module";
// import { useEffect } from "react";
// import { usePathname } from "next/navigation";
// const tagManagerArgs = {
//   gtmId: "GTM-NC59PRCL",
// };

// export default function RootLayout({ children }) {
//   const pathname = usePathname();

//   // useEffect(() => {
//   //   console.log("here 1312");
//   //   if (typeof window !== "undefined") {
//   //     window.Tawk_API = window.Tawk_API || {};
//   //     window.Tawk_LoadStart = new Date();
//   //   }
//   // }, []);

//   useEffect(() => {
//     if (process.env.NEXT_PUBLIC_BRANCH == "main")
//       TagManager.initialize(tagManagerArgs);
//   }, []);

//   return (
//     <html lang="en">
//       <head>
//         {process.env.NEXT_PUBLIC_BRANCH == "main" && (
//           <Script id="clarity-analytics" strategy="afterInteractive">
//             {`
//             (function(c,l,a,r,i,t,y){
//                 c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
//                 t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
//                 y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
//             })(window, document, "clarity", "script", "oqoynm86z4");
//           `}
//           </Script>
//         )}
//         <Script
//           id="tawk-script"
//           strategy="afterInteractive"
//           dangerouslySetInnerHTML={{
//             __html: `
//             var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
//             (function(){
//               var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
//               s1.async=true;
//               s1.src='https://embed.tawk.to/670415b202d78d1a30edbc1a/1i9jv9g6s';
//               s1.charset='UTF-8';
//               s1.setAttribute('crossorigin','*');
//               s0.parentNode.insertBefore(s1,s0);
//             })();
//           `,
//           }}
//         />
//         <Script
//           id="tawk-script-2"
//           strategy="afterInteractive"
//           dangerouslySetInnerHTML={{
//             __html: `
//             var customize_tawk = "";

//             function customize_tawk_widget(){
//               // get the iframe element iframe[title='chat widget']
//               var iframe = document.querySelectorAll('iframe[title="chat widget"]')[2];
//               if (iframe) {
//                 iframe.style.backgroundColor = "white";
//                 iframe.style.background = "white";
//                 iframe.style.borderRadius = "10px";
//               }
//             }

//             /*Customize the widget as soon as the widget is loaded*/
//             Tawk_API = Tawk_API || {};
//             Tawk_API.onLoad = function(){
//               var customize_tawk = setInterval(customize_tawk_widget, 100);

//             };
//           `,
//           }}
//         />
//       </head>
//       {/* {process.env.NEXT_PUBLIC_BRANCH == "main" && (
//         <GoogleAnalytics gaId="GTM-NC59PRCL" />
//       )} */}

//       <body className="bg-white">
//         <LoadingProvider>
//           <AuthProvider>
//             <ModalProvider>
//               <Header />
//               <Toaster />
//               {children}
//               <div id="sign-in-button" />
//               {pathname !== "/" && <Footer />}
//             </ModalProvider>
//           </AuthProvider>
//         </LoadingProvider>
//       </body>
//     </html>
//   );
// }

"use client";
import "./globals.css";
import "../config/axios";
import dynamic from "next/dynamic";
import { useEffect } from "react";
import { usePathname } from "next/navigation";
import Script from "next/script";
import { Toaster } from "react-hot-toast";
import TagManager from "react-gtm-module";

import { AuthProvider, LoadingProvider } from "@/contexts";
import ModalProvider from "@/contexts/modals";
import Header from "@/components/header";

const Footer = dynamic(() => import("@/components/footer"), { ssr: false });

const tagManagerArgs = { gtmId: "GTM-NC59PRCL" };

export default function RootLayout({ children }) {
  const pathname = usePathname();

  // Initialize GTM only in production
  useEffect(() => {
    if (process.env.NEXT_PUBLIC_BRANCH === "main") {
      TagManager.initialize(tagManagerArgs);
    }
  }, []);

  return (
    <html lang="en">
      <head>
        {process.env.NEXT_PUBLIC_BRANCH === "main" && (
          <Script id="clarity-analytics" strategy="lazyOnload">
            {`
              (function(c,l,a,r,i,t,y){
                  c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
                  t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
                  y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
              })(window, document, "clarity", "script", "oqoynm86z4");
            `}
          </Script>
        )}
        {/* <Script
          id="tawk-script"
          strategy="lazyOnload"
          dangerouslySetInnerHTML={{
            __html: `
              var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
              (function(){
                var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
                s1.async=true;
                s1.src='https://embed.tawk.to/670415b202d78d1a30edbc1a/1i9jv9g6s';
                s1.charset='UTF-8';
                s1.setAttribute('crossorigin','*');
                s0.parentNode.insertBefore(s1,s0);
              })();
            `,
          }}
        /> */}
      </head>

      <body className="bg-white">
        <LoadingProvider>
          <AuthProvider>
            <ModalProvider>
              {(pathname !== "/" ) && <Header />}
              <Toaster />
              {children}
              <div id="sign-in-button" />
              {(pathname !== "/" && pathname !== "/home" ) && <Footer />}
            </ModalProvider>
          </AuthProvider>
        </LoadingProvider>
      </body>
    </html>
  );
}
